{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,IAAIC,EAAe,C,SAACL,E,MAAUC,GAE9B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KACvBN,GACFK,EAAQF,GAERG,EAAOH,EAAa,G,CAvCXI,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAA8BC,GAC5BA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOH,EAAEI,cAAcf,MAAMgB,OACrCC,EAAOH,OAAOH,EAAEI,cAAcE,KAAKD,OACnCE,EAASJ,OAAOH,EAAEI,cAAcG,OAAOF,OAE7C,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,IACzCrB,EAAcqB,EAAUN,GACvBO,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,YAAW,KACTzB,EAAA0B,OAAOC,QACL,uBAAqBxB,QAAiBC,MAAU,GAEjDA,EAAM,IAEVwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,YAAW,KACTzB,EAAA0B,OAAOG,QACL,sBAAoB1B,QAAiBC,MAAU,GAEhDA,EAAM,IAEba,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', submitCreatePromises);\n\n\nfunction submitCreatePromises(e){\n  e.preventDefault();\n \n  let delay = Number(e.currentTarget.delay.value);\n  let step = Number(e.currentTarget.step.value);\n  let amount = Number(e.currentTarget.amount.value);\n\nfor (let position = 1; position <= amount; position++) {\n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    setTimeout(() => {\n      Notify.success(\n        `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n    }, delay)\n  })\n  .catch(({ position, delay }) => { \n    setTimeout(() => {\n      Notify.failure(\n        `❌ Rejected promise ${position} in ${delay}ms`\n        );\n    }, delay) \n  });\ndelay += step;\n}\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  let promiseValue = {position, delay};\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(promiseValue);\n    }\n      reject(promiseValue);\n  })\n}\n// const form = document.querySelector('.form');\n\n// const firstDelayMs = document.querySelector('[name=\"delay\"]');\n// //const delayStepMs = document.querySelector('[name=\"step\"]');\n// //const amount = document.querySelector('[name=\"amount\"]');\n// form.addEventListener('submit', submitCreatePromises);\n\n// // Loop to create promises from function createPromise after event listener\n\n// function submitCreatePromises(e) {\n\n//   e.preventDefault();\n\n//   let delay = Number(e.currentTarget.delay.value);\n//   let step = Number(e.currentTarget.step.value);\n//   let amount = Number(e.currentTarget.amount.value);\n\n//   for (let position = 1; position <= amount; position++) {\n//     createPromise(position, delay)\n//       .then(({ position, delay }) => {\n//         Notiflix.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       // createPromise(2, 1500)\n// //   .then(({ position, delay }) => {\n// //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //   })\n// //   .catch(({ position, delay }) => {\n// //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// //   });\n\n//       .catch(({ position, delay }) => {\n//         Notiflix.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//     delay += step;\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//     // Fulfill\n//     let promiseValue = {position, delay};\n    \n//     return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(promiseValue);\n//   } \n//   else {\n//     // Reject\n//     reject(promiseValue);\n//   })\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n  \n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","promiseValue","Promise","resolve","reject","document","querySelector","addEventListener","e","preventDefault","delay1","Number","currentTarget","value","step","amount","position1","then","setTimeout","Notify","success","catch","failure"],"version":3,"file":"03-promises.b13f07ad.js.map"}